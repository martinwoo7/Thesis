# -*- coding: utf-8 -*-
"""LSTM_autoencoder_HAR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bAjAKzx_SFf_C5WxYY6zjF-iyCJTgo4h
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd drive/MyDrive/Experiments_2021/

!ls

from numpy import mean
from numpy import std
from numpy import dstack
from pandas import read_csv
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Flatten
from keras.layers import Dropout
from keras.layers import LSTM
from keras.layers import TimeDistributed
from keras.layers.convolutional import Conv1D
from keras.layers.convolutional import MaxPooling1D
from tensorflow.keras.utils import to_categorical
from matplotlib import pyplot

# load a single file as a numpy array
def load_file(filepath):
	dataframe = read_csv(filepath, header=None, delim_whitespace=True)
	return dataframe.values

# load a list of files and return as a 3d numpy array
def load_group(filenames, prefix=''):
	loaded = list()
	for name in filenames:
		data = load_file(prefix + name)
		loaded.append(data)
	# stack group so that features are the 3rd dimension
	loaded = dstack(loaded)
	return loaded

# load a dataset group, such as train or test
def load_dataset_group(group, prefix=''):
	filepath = prefix + group + '/Inertial Signals/'
	# load all 9 files as a single array
	filenames = list()
	# total acceleration
	filenames += ['total_acc_x_'+group+'.txt', 'total_acc_y_'+group+'.txt', 'total_acc_z_'+group+'.txt']
	# body acceleration
	filenames += ['body_acc_x_'+group+'.txt', 'body_acc_y_'+group+'.txt', 'body_acc_z_'+group+'.txt']
	# body gyroscope
	filenames += ['body_gyro_x_'+group+'.txt', 'body_gyro_y_'+group+'.txt', 'body_gyro_z_'+group+'.txt']
	# load input data
	X = load_group(filenames, filepath)
	# load class output
	y = load_file(prefix + group + '/y_'+group+'.txt')
	return X, y

# load the dataset, returns train and test X and y elements
def load_dataset(prefix=''):
	# load all train
	trainX, trainy = load_dataset_group('train', prefix + 'HARDataset/')
	print(trainX.shape, trainy.shape)
	# load all test
	testX, testy = load_dataset_group('test', prefix + 'HARDataset/')
	print(testX.shape, testy.shape)
	# zero-offset class values
	trainy = trainy - 1
	testy = testy - 1
	# one hot encode y
	trainy = to_categorical(trainy)
	testy = to_categorical(testy)
	print(trainX.shape, trainy.shape, testX.shape, testy.shape)
	return trainX, trainy, testX, testy

trainX, trainy, testX, testy = load_dataset()

from numpy import array
from keras.models import Sequential
from keras.layers import LSTM
from keras.layers import Dense
from keras.layers import RepeatVector
from keras.layers import TimeDistributed
from keras.utils.vis_utils import plot_model
from tensorflow.keras import optimizers
# define model
model = Sequential()
model.add(LSTM(100, activation='relu', input_shape=(128,9)))
model.add(RepeatVector(128))
model.add(LSTM(100, activation='relu', return_sequences=True))
model.add(TimeDistributed(Dense(1)))
optimizer_mod1 = optimizers.Adam(clipvalue=0.5,learning_rate=0.0001)
model.compile(optimizer_mod1, loss='mse')
# fit model
model.fit(trainX, trainX, epochs=300, verbose=1)

model.save('LSTM_autoencoder_Dec2021')

model.summary()

def rename(model, layer, new_name):
    def _get_node_suffix(name):
        for old_name in old_nodes:
            if old_name.startswith(name):
                return old_name[len(name):]

    old_name = layer.name
    old_nodes = list(model._network_nodes)
    new_nodes = []

    for l in model.layers:
        if l.name == old_name:
            l._name = new_name
            # vars(l).__setitem__('_name', new)  # bypasses .__setattr__
            new_nodes.append(new_name + _get_node_suffix(old_name))
        else:
            new_nodes.append(l.name + _get_node_suffix(l.name))
    model._network_nodes = set(new_nodes)

rename(model, model.layers[0], 'LSTM_1')
rename(model, model.layers[2], 'LSTM_2')

model.summary()

model.save('LSTM_autoencoder_Dec2021_renamed')

!ls

from keras.models import load_model
model_loaded = load_model('LSTM_autoencoder_Dec2021_renamed')

model_loaded.summary()

import keras
from keras import models
from keras.models import Sequential
starting_layer = 0
ending_layer = 0
new_model = Sequential()
for ix in range(starting_layer, ending_layer + 1):
    curr_layer = model_loaded.get_layer(index=ix)
    # copy this layer over to the new model
    if (ix == starting_layer):
      new_model.add(keras.Input(shape=(None,9)))
    
    new_model.add(curr_layer)

new_model.summary()

pofile = new_model.predict(trainX)

pofile.shape

import numpy as np
np.savetxt('Profile_LSTM_encoder.dat', pofile)

from keras.models import Model
model_encoder = Model(inputs=model.inputs, outputs=model.layers[0].output)

profile = model_encoder.predict(trainX)

profile.shape

import numpy as np
np.savetxt('Profile_LSTM_encoder2.dat', profile)

output = model.predict(trainX)

output.shape

trainX.shape

import sys
def sizeof(obj):
    size = sys.getsizeof(obj)
    if isinstance(obj, dict): return size + sum(map(sizeof, obj.keys())) + sum(map(sizeof, obj.values()))
    if isinstance(obj, (list, tuple, set, frozenset)): return size + sum(map(sizeof, obj))
    return size

Train_size = sizeof(trainX)
Train_MB = Train_size / 1e+6
Train_MB

x_train = trainX.reshape((len(trainX), np.prod(trainX.shape[1:])))

x_train.shape

Train_size = sizeof(x_train)
Train_MB = Train_size / 1e+6
Train_MB

np.savetxt('x_train.dat', x_train)

profile_size = sizeof(profile)
profile_MB = profile_size / 1e+6
profile_MB

# define model
model2 = Sequential()
model2.add(LSTM(100, activation='relu', input_shape=(128,9)))
model2.add(RepeatVector(128))
model2.add(LSTM(100, activation='relu', return_sequences=True))
model2.add(TimeDistributed(Dense(9)))
optimizer_mod2 = optimizers.Adam(clipvalue=0.5,learning_rate=0.0001)
model2.compile(optimizer_mod1, loss='mse')
# fit model
model2.fit(trainX, trainX, epochs=300, verbose=1)

model2.save('LSTM_autoencoder_dec20_2021_correct_300Completed')

model2.save('LSTM_autoencoder_dec20_2021_correct')

output2 = model2.predict(trainX)

output2.shape

model_encoder2 = Model(inputs=model2.inputs, outputs=model2.layers[0].output)

profile = model_encoder2.predict(trainX)

profile.shape

np.savetxt('Profile_LSTM_encoder_correct.dat', profile)